google drive api current state of play 2025-02-18

"Google Drive <> Streamlit vs Google Drive <> GCP"

As part of the video brief feature, we'd like to upload documents we create to google drive. This seems possible. But it's difficult to figure out how to do it. So far, it seems like it's almost working, and only the GCP-hosted version of cicero.

I used the example code. https://developers.google.com/drive/api/guides/manage-uploads#python_1 (the code no longer seems to be on that page, which is odd. Hunting around, it seems like https://github.com/googleapis/google-api-python-client/blob/main/docs/README.md has more details about auth, which might be relevant.)

(https://developers.google.com/apps-script/guides/docs is the other thing that seems relevant as a possibility, but I haven't tried it yet. Also, might be able to use this to autonumber docs tables as they get edited?)

Local doesn't work because I am not logged in as a google account. That makes sense.

Streamlit seems to not work, for no particular reason. (It just hangs?) ← Maybe you have some idea about this, since you know more about the thing 

GCP succeeds with a message like "File with ID: "1sww4ZdTWfmPOnCPlXdwIJc5Ors0lhDvMIs2SNuzV_3A" has been uploaded." — where is this file? It's not in my drive when I'm the account running it. Is it somehow... in a drive that the GCP project itself owns? Look into the drive api that I enabled. Also, see if you can pass a location argument to the function? It's hard to tell what its args should be because the documentation link is broken and the IDE discoverability features don't really work.

Another possibility is to skip this confusing interface library altogether and just make some POST requests manually, as also described in the documentation. I haven't tried this yet and don't know if it would run into similar problems (or maybe it would just work).

There's something about authorization scopes here, might be relevant: https://developers.google.com/drive/api/reference/rest/v3/files/create#authorization-scopes

GCP printouts for

    # create drive api client
    service = build("drive", "v3", credentials=creds)
    # here for testing purposes.
    st_print(service.about())
    st_print(service.about().get())
    :

st.navigation(pages).run()Resourcegoogleapiclient.discovery.Resource(http, baseUrl, model, requestBuilder, developerKey, resourceDesc, rootDesc, schema, universe_domain='googleapis.com')
A class for interacting with a resource.
closemethod	Close httplib2 connections.
getmethod	Gets information about the user, the user's Drive, and system capabilities. For more information, see [Return user info](https://developers.google.com/drive/api/guides/user-info). Required: The `fields` parameter must be set. To return the exact fields you need, see [Return specific fields](https://developers.google.com/drive/api/guides/fields-parameter).

st.navigation(pages).run()HttpRequestgoogleapiclient.http.HttpRequest(http, postproc, uri, method='GET', body=None, headers=None, methodId=None, resumable=None)
Encapsulates a single HTTP request.
bodyNoneType	None
body_sizeint	0
headersdict	{'accept': 'application/json', 'accept-encoding': 'gzip, deflate', 'user-agent': '(gzip)', 'x-goog-api-client': 'gdcl/2.160.0 gl-python/3.12.3'}
httpAuthorizedHttp	A httplib2 HTTP class with credentials.
methodstr	'GET'
methodIdstr	'drive.about.get'
response_callbackslist	[]
resumableNoneType	None
resumable_progressint	0
resumable_uriNoneType	None
uristr	'https://www.googleapis.com/drive/v3/about?alt=json'
add_response_callbackmethod	add_response_headers_callback
executemethod	Execute the request.
from_jsonfunction	Returns an HttpRequest populated with info from a JSON object.
next_chunkmethod	Execute the next step of a resumable upload.
null_postprocfunction	No docs available
postprocmethod	Convert the response wire format into a Python object.
to_jsonmethod	Returns a JSON representation of the HttpRequest.

2025-02-19 note to self: doing what I mind myself most motivatable to do, instead of working on the very-hard-to-debug code, I will look into [... I haven't decided yet...]
